<aside class="offcanvas offcanvas-end" tabindex="-1" id="offcanvas_cart">
    @if (this.shoppingCart != null)
    {
        <div class="offcanvas-header">
            <h5 class="offcanvas-title">Your cart (@shoppingCart.ShoppingCartItems.Count) </h5>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">

            @foreach (var item in this.shoppingCart.ShoppingCartItems)
            {
                <figure class="itemside mb-4">
                    <div class="aside">
                        <img src="@item.ThumbnailPath" class="border img-sm rounded">
                    </div>
                    <figcaption class="info">
                        <button class="btn btn-icon btn-light float-end" @onclick=@(async () => await RemoveCartItem(item.ProductId))><i class="fa fa-trash"></i></button>
                        <p> @item.ProductName </p>
                        <span class="text-muted">@item.Quantity x @FormatPrice(item.Price) </span> <br>
                        <strong class="price"> @FormatPrice(item.Amount) </strong>
                    </figcaption>
                </figure>
            }

            <hr>

            <p class="mb-3 text-center"> Subtotal:  <strong class="text-danger"> @FormatPrice(shoppingCart.Sum) </strong></p>
            <div class="mb-3">
                <a href="#" class="btn w-100 btn-success"> Checkout </a>
            </div>
            <p class="mb-3 text-center"> <img src="images/misc/payments.png" height="22">  </p>
        </div>
    }
    else
    {
        <div class="offcanvas-header">
            <h5 class="offcanvas-title">Your cart </h5>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
    }
</aside>

@code {
    private ShoppingCartModel? shoppingCart;

    protected override void OnInitialized()
    {
        Bus.Subscribe<ProductMessage>(UpdateCartItems);
    }

    protected override async Task OnInitializedAsync()
    {
        bool userIsAuthenticated = await AuthService.IsAuthenticated();

        if(userIsAuthenticated)
        {
            var response = await CartService.GetShoppingCart();

            if (response.Succeeded)
            {
                shoppingCart = response.Data;
                StateHasChanged();
            }
        }
    }

    private void UpdateCartItems(MessageArgs args)
    {
        var message = args.GetMessage<ProductMessage>();

        var productId = message.ProductId;

        Task.Factory.StartNew(async () =>
        {
            var response = await CartService.UpdateCartItems(productId);

            if (response.Succeeded)
            {
                shoppingCart = response.Data;
                StateHasChanged();
            }
        });
    }

    private async Task RemoveCartItem(int productId)
    {
        var response = await CartService.RemoveCartItem(productId);

        if(response.Succeeded)
        {
            shoppingCart = response.Data;
            StateHasChanged();
        }
    }

    private string FormatPrice(double amount)
    {
        return string.Format("{0:C}", amount);
    }
}