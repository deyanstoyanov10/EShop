@using Microsoft.AspNetCore.SignalR.Client

<div id="aside_filter" class="collapse card d-lg-block mb-5">
    @if (!this.Loaded)
    {
        <Loader />
    }
    else if(searchModel.Filters == null || !searchModel.Filters.Any())
    {
        <p role="alert">No resource found!</p>
    }
    else
    {
        @foreach (var filter in searchModel.Filters)
        {
            <article class="filter-group">
                <header class="card-header">
                    <a href="#" class="title" data-bs-toggle="collapse" data-bs-target="#collapse_aside_brands">
                        <i class="icon-control fa fa-chevron-down"></i> @filter.Label
                    </a>
                </header>
                <div class="collapse show" id="collapse_aside_brands">
                    <div class="card-body">

                        @foreach (var option in filter.Options)
                        {
                            <label class="form-check mb-2">
                                @if (option.Active)
                                {
                                    <input type="checkbox" class="form-check-input" @bind-value=@option.Active checked="checked" @onclick="@(async () => await UpdateProducts())" />
                                }
                                else
                                {
                                    <input type="checkbox" class="form-check-input" @bind-value=@option.Active @onclick="@(async () => await UpdateProducts())" />
                                }
                                <span class="form-check-label">@option.Name</span>
                            </label>
                        }
                    </div>
                </div>
            </article>
        }
    }
</div>

@code {
    [Parameter]
    public int CategoryId { get; set; }

    private SearchModel searchModel = new SearchModel();

    bool Loaded = false;

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Filters CategoryID: " + this.CategoryId);

        Bus.Subscribe<SocketResponse<SearchModel>>(ReceiveFilters);

        await Bus.Publish<GetFiltersByCategoryMessage>(new GetFiltersByCategoryMessage(this.CategoryId));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!this.Loaded)
        {
            Bus.Subscribe<SocketResponse<SearchModel>>(ReceiveFilters);

            await Bus.Publish<GetFiltersByCategoryMessage>(new GetFiltersByCategoryMessage(this.CategoryId));
        }
    }

    private void ReceiveFilters(MessageArgs args)
    {
        var message = args.GetMessage<SocketResponse<SearchModel>>();

        this.searchModel = message.Data;

        this.Loaded = true;

        StateHasChanged();

        Bus.Publish<SearchModel>(this.searchModel);
    }

    private async Task UpdateProducts()
    {
        await Bus.Publish<SearchModel>(this.searchModel);
    }
}
