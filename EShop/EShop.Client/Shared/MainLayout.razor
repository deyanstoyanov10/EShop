@inherits LayoutComponentBase
@using Microsoft.AspNetCore.SignalR.Client

<div class="page">
    <Header />
    @Body
</div>
<Footer />
<ShoppingCart />

@code {
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7030/Websocket")
            .Build();

        hubConnection.On<SocketResponse<SearchModel>>("ReceiveFilters", (response) =>
        {
            Bus.Publish<SocketResponse<SearchModel>>(response);
        });

        hubConnection.On<SocketResponse<IEnumerable<ProductOutputModel>>>("ReceiveProducts", (response) =>
        {
            Bus.Publish<SocketResponse<IEnumerable<ProductOutputModel>>>(response);
        });

        hubConnection.On<SocketResponse<ShoppingCartModel>>("UpdateCartItems", (response) =>
        {
            Bus.Publish<SocketResponse<ShoppingCartModel>>(response);
        });

        await hubConnection.StartAsync();

        Bus.Subscribe<GetFiltersByCategoryMessage>(GetFilters);
        Bus.Subscribe<SearchModel>(UpdateProducts);
        Bus.Subscribe<ProductMessage>(AddProductToShoppingCart);
    }

    private void GetFilters(MessageArgs args)
    {
        var message = args.GetMessage<GetFiltersByCategoryMessage>();

        int categoryId = message.CategoryId;

        if (hubConnection is not null)
        {
            try
            {
                Task.WaitAll(hubConnection.SendAsync("GetFilters", categoryId));
            }
            catch(Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }

    private void UpdateProducts(MessageArgs args)
    {
        var message = args.GetMessage<SearchModel>();

        if (hubConnection is not null)
        {
            try
            {
                Task.WaitAll(hubConnection.SendAsync("GetProducts", message));
            }
            catch(Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }

    private void AddProductToShoppingCart(MessageArgs args)
    {
        var message = args.GetMessage<ProductMessage>();

        int productId = message.ProductId;

        if (hubConnection is not null)
        {
            var task = CartService.AddProductsToShoppingCart(new Common.Models.ShoppingCart.ShoppingcartRecords.ShoppingCartItemRequest
                {
                    ConnectionId = this.hubConnection.ConnectionId,
                    ProductId = productId
                });

            var response = task.GetAwaiter().GetResult();

            if(response.Failure)
            {
                // Send toastr message
            }
            else
            {
                // Send toastr message
            }
        }
    }
}