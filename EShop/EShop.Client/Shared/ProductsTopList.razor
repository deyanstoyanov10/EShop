<div class="row">
    @if (!this.Loaded)
    {
        <Loader />
    }
    else if(productList == null || productList.Count == 0)
    {
        <p role="alert">No resource found!</p>
    }
    else
    {
        @foreach (var product in this.productList)
        {
            <div class="col-lg-3 col-md-6 col-sm-6">
                <figure class="card card-product-grid">
                    <div class="img-wrap">
                        <img src="@product.Picture">
                    </div>
                    <figcaption class="info-wrap border-top">
                        <div class="price-wrap">
                            <strong class="price">@product.Amount</strong>
                        </div>
                        <p class="title mb-2">@product.Label</p>

                        <button class="btn btn-primary" @onclick="@(async () => await AddProductToCart(product.ProductId))">Add to cart</button>
                        <a href="#" class="btn btn-light btn-icon"> <i class="fa fa-heart"></i> </a>
                    </figcaption>
                </figure>
            </div>
        }
    }

</div>

@code {
    private List<ProductOutputModel> productList = new List<ProductOutputModel>();

    bool Loaded = false;

    protected override async Task OnInitializedAsync()
    {
        Bus.Subscribe<SocketResponse<IEnumerable<ProductOutputModel>>>(ReceiveProducts);

        await Task.Delay(1000);

        await Bus.Publish<GetTopProducts>(new GetTopProducts(10));
    }

    private void ReceiveProducts(MessageArgs args)
    {
        var message = args.GetMessage<SocketResponse<IEnumerable<ProductOutputModel>>>();

        this.productList = message.Data.ToList();

        this.Loaded = true;

        StateHasChanged();
    }

    private async Task AddProductToCart(int productId)
    {
        var message = new ProductMessage()
        {
            ProductId = productId
        };

        await Bus.Publish<ProductMessage>(message);
    }
}